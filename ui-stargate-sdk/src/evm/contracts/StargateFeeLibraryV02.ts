/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {FunctionFragment, Result, EventFragment} from '@ethersproject/abi';
import type {Listener, Provider} from '@ethersproject/providers';
import type {TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue} from './common';

export declare namespace Pool {
  export type SwapObjStruct = {
    amount: PromiseOrValue<BigNumberish>;
    eqFee: PromiseOrValue<BigNumberish>;
    eqReward: PromiseOrValue<BigNumberish>;
    lpFee: PromiseOrValue<BigNumberish>;
    protocolFee: PromiseOrValue<BigNumberish>;
    lkbRemove: PromiseOrValue<BigNumberish>;
  };

  export type SwapObjStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    amount: BigNumber;
    eqFee: BigNumber;
    eqReward: BigNumber;
    lpFee: BigNumber;
    protocolFee: BigNumber;
    lkbRemove: BigNumber;
  };
}

export interface StargateFeeLibraryV02Interface extends utils.Interface {
  functions: {
    'DELTA_1()': FunctionFragment;
    'DELTA_2()': FunctionFragment;
    'DENOMINATOR()': FunctionFragment;
    'LAMBDA_1()': FunctionFragment;
    'LAMBDA_2()': FunctionFragment;
    'LP_FEE()': FunctionFragment;
    'PROTOCOL_FEE()': FunctionFragment;
    'PROTOCOL_SUBSIDY()': FunctionFragment;
    'VERSION()': FunctionFragment;
    'factory()': FunctionFragment;
    'getEquilibriumFee(uint256,uint256,uint256)': FunctionFragment;
    'getFees(uint256,uint256,uint16,address,uint256)': FunctionFragment;
    'getTrapezoidArea(uint256,uint256,uint256,uint256,uint256,uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DELTA_1'
      | 'DELTA_2'
      | 'DENOMINATOR'
      | 'LAMBDA_1'
      | 'LAMBDA_2'
      | 'LP_FEE'
      | 'PROTOCOL_FEE'
      | 'PROTOCOL_SUBSIDY'
      | 'VERSION'
      | 'factory'
      | 'getEquilibriumFee'
      | 'getFees'
      | 'getTrapezoidArea'
      | 'owner'
      | 'renounceOwnership'
      | 'transferOwnership',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DELTA_1', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DELTA_2', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DENOMINATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LAMBDA_1', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LAMBDA_2', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LP_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PROTOCOL_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PROTOCOL_SUBSIDY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'VERSION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getEquilibriumFee',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getFees',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getTrapezoidArea',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: 'DELTA_1', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DELTA_2', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DENOMINATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LAMBDA_1', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LAMBDA_2', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LP_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PROTOCOL_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PROTOCOL_SUBSIDY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'VERSION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEquilibriumFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTrapezoidArea', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface StargateFeeLibraryV02 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StargateFeeLibraryV02Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DELTA_1(overrides?: CallOverrides): Promise<[BigNumber]>;

    DELTA_2(overrides?: CallOverrides): Promise<[BigNumber]>;

    DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    LAMBDA_1(overrides?: CallOverrides): Promise<[BigNumber]>;

    LAMBDA_2(overrides?: CallOverrides): Promise<[BigNumber]>;

    LP_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PROTOCOL_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PROTOCOL_SUBSIDY(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getEquilibriumFee(
      idealBalance: PromiseOrValue<BigNumberish>,
      beforeBalance: PromiseOrValue<BigNumberish>,
      amountSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    getFees(
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<string>,
      _amountSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[Pool.SwapObjStructOutput] & {s: Pool.SwapObjStructOutput}>;

    getTrapezoidArea(
      lambda: PromiseOrValue<BigNumberish>,
      yOffset: PromiseOrValue<BigNumberish>,
      xUpperBound: PromiseOrValue<BigNumberish>,
      xLowerBound: PromiseOrValue<BigNumberish>,
      xStart: PromiseOrValue<BigNumberish>,
      xEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & {from?: PromiseOrValue<string>},
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>},
    ): Promise<ContractTransaction>;
  };

  DELTA_1(overrides?: CallOverrides): Promise<BigNumber>;

  DELTA_2(overrides?: CallOverrides): Promise<BigNumber>;

  DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  LAMBDA_1(overrides?: CallOverrides): Promise<BigNumber>;

  LAMBDA_2(overrides?: CallOverrides): Promise<BigNumber>;

  LP_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  PROTOCOL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  PROTOCOL_SUBSIDY(overrides?: CallOverrides): Promise<BigNumber>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  getEquilibriumFee(
    idealBalance: PromiseOrValue<BigNumberish>,
    beforeBalance: PromiseOrValue<BigNumberish>,
    amountSD: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  getFees(
    _srcPoolId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    _dstChainId: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<string>,
    _amountSD: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<Pool.SwapObjStructOutput>;

  getTrapezoidArea(
    lambda: PromiseOrValue<BigNumberish>,
    yOffset: PromiseOrValue<BigNumberish>,
    xUpperBound: PromiseOrValue<BigNumberish>,
    xLowerBound: PromiseOrValue<BigNumberish>,
    xStart: PromiseOrValue<BigNumberish>,
    xEnd: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & {from?: PromiseOrValue<string>},
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>},
  ): Promise<ContractTransaction>;

  callStatic: {
    DELTA_1(overrides?: CallOverrides): Promise<BigNumber>;

    DELTA_2(overrides?: CallOverrides): Promise<BigNumber>;

    DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    LAMBDA_1(overrides?: CallOverrides): Promise<BigNumber>;

    LAMBDA_2(overrides?: CallOverrides): Promise<BigNumber>;

    LP_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_SUBSIDY(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    getEquilibriumFee(
      idealBalance: PromiseOrValue<BigNumberish>,
      beforeBalance: PromiseOrValue<BigNumberish>,
      amountSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    getFees(
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<string>,
      _amountSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<Pool.SwapObjStructOutput>;

    getTrapezoidArea(
      lambda: PromiseOrValue<BigNumberish>,
      yOffset: PromiseOrValue<BigNumberish>,
      xUpperBound: PromiseOrValue<BigNumberish>,
      xLowerBound: PromiseOrValue<BigNumberish>,
      xStart: PromiseOrValue<BigNumberish>,
      xEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    DELTA_1(overrides?: CallOverrides): Promise<BigNumber>;

    DELTA_2(overrides?: CallOverrides): Promise<BigNumber>;

    DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    LAMBDA_1(overrides?: CallOverrides): Promise<BigNumber>;

    LAMBDA_2(overrides?: CallOverrides): Promise<BigNumber>;

    LP_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_SUBSIDY(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getEquilibriumFee(
      idealBalance: PromiseOrValue<BigNumberish>,
      beforeBalance: PromiseOrValue<BigNumberish>,
      amountSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getFees(
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<string>,
      _amountSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTrapezoidArea(
      lambda: PromiseOrValue<BigNumberish>,
      yOffset: PromiseOrValue<BigNumberish>,
      xUpperBound: PromiseOrValue<BigNumberish>,
      xLowerBound: PromiseOrValue<BigNumberish>,
      xStart: PromiseOrValue<BigNumberish>,
      xEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & {from?: PromiseOrValue<string>}): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>},
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DELTA_1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DELTA_2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LAMBDA_1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LAMBDA_2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LP_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROTOCOL_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROTOCOL_SUBSIDY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEquilibriumFee(
      idealBalance: PromiseOrValue<BigNumberish>,
      beforeBalance: PromiseOrValue<BigNumberish>,
      amountSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getFees(
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<string>,
      _amountSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTrapezoidArea(
      lambda: PromiseOrValue<BigNumberish>,
      yOffset: PromiseOrValue<BigNumberish>,
      xUpperBound: PromiseOrValue<BigNumberish>,
      xLowerBound: PromiseOrValue<BigNumberish>,
      xStart: PromiseOrValue<BigNumberish>,
      xEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & {from?: PromiseOrValue<string>},
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>},
    ): Promise<PopulatedTransaction>;
  };
}
